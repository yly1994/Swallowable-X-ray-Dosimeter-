function [y1] = myNeuralNetworkFunctionx6(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 10-Dec-2021 16:10:25.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx5 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [2712.16666666667;157;42;1;2060.4653834213];
x1_step1.gain = [6.65155002434638e-05;0.000661157024793388;0.00105318588730911;0.00131147540983607;0.0218326736890651];
x1_step1.ymin = -1;

% Layer 1
b1 = [20.739808859163684218;16.632451099886857548;-11.088049231809804951;0.15329894276416941579;-16.926079801783906476];
IW1_1 = [5.9664873236711830629 -1.3324487633509369822 7.6500526644684176958 4.4443101098590735987 74.833562001241503481;-44.393227611398458521 -38.851604405318731494 36.387014824829286397 38.427691627483746117 -37.159442647037934648;10.490364621258764899 -21.336732850901054093 -4.2801792057222893817 -6.9128727182763647363 17.73719225267726074;-0.25549605610927034194 -0.075803335706541782879 0.026689333738655420664 0.0040507396444468945357 0.008285752110782368049;6.8559963255855027597 -7.1739376338733427119 18.041997748475619545 29.34362379691213718 17.068805900898126993];

% Layer 2
b2 = 0.51793695410224127595;
LW2_1 = [0.01233820627216671538 -0.006117694697910086403 0.0056204611160712127441 -3.6212059888254923834 -0.017753339150831045495];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0285714285714286;
y1_step1.xoffset = 5;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
